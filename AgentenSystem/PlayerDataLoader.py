import csv
from typing import List, Dict, Tuple, Optional
from PlayerAgent import Player
from config import SYSTEM_CONFIG, CLUB_CONFIG, DISPLAY_CONFIG


class ClubBasedPlayerDataLoader:
    """
    Verantwortlich f√ºr das Laden, Verarbeiten und Validieren von Spielerdaten aus CSV-Dateien.
    Diese Klasse erm√∂glicht eine Club-basierte Auswahl von Spielern und bietet Mechanismen
    zur Handhabung von unterschiedlich gro√üen Kadern sowie zur Datenbereinigung.

    Hauptfunktionen:
    1. Laden aller Spieler aus einer spezifizierten CSV-Datei.
    2. Filtern der Spieler basierend auf konfigurierten Club-Namen (K√§ufer und Verk√§ufer).
    3. Anwenden von Strategien zum Umgang mit unterschiedlichen Kadergr√∂√üen (z.B. Auff√ºllen, K√ºrzen).
    4. Validierung der geladenen Daten und Kadergr√∂√üen anhand definierter Mindestanforderungen.
    5. Bereinigung von Rohdaten aus der CSV, um Konsistenz sicherzustellen.
    6. Erstellung von Beispiel-Kadern, falls die Datenquelle nicht verf√ºgbar ist und dies konfiguriert wurde.

    Alle Operationen werden als statische Methoden implementiert, da die Klasse prim√§r als Utility-Sammlung dient.
    """

    @staticmethod
    def load_clubs_from_csv(
        buyer_club_name: str = None, 
        seller_club_name: str = None,
        file_path: str = None
    ) -> Tuple[List[Player], List[Player]]:
        """
        L√§dt Spielerdaten f√ºr zwei spezifische Clubs aus der CSV
        
        Args:
            buyer_club_name (str, optional): Name des K√§ufer-Clubs. 
                Standardm√§√üig aus `CLUB_CONFIG`.
            seller_club_name (str, optional): Name des Verk√§ufer-Clubs. 
                Standardm√§√üig aus `CLUB_CONFIG`.
            file_path (str, optional): Pfad zur CSV-Datei. 
                Standardm√§√üig aus `SYSTEM_CONFIG`.
            
        Returns:
            Tuple[List[Player], List[Player]]: Ein Tupel, das zwei Listen von Spieler-Objekten enth√§lt:
                (Liste der Spieler des K√§ufer-Clubs, Liste der Spieler des Verk√§ufer-Clubs).
            
        Raises:
            FileNotFoundError: Wird ausgel√∂st, wenn die angegebene CSV-Datei nicht gefunden wird und
                `FALLBACK_TO_SAMPLE_DATA` deaktiviert ist.
            ValueError: Wird ausgel√∂st, wenn ein Club nicht gen√ºgend Spieler gem√§√ü 
                `MIN_PLAYERS_REQUIRED` hat und `FALLBACK_TO_SAMPLE_DATA` deaktiviert ist 
                (obwohl die aktuelle Implementierung dies eher durch Logging handhabt und ggf. leere Listen liefert).
        """
        # Lade Konfigurationswerte, falls keine spezifischen Parameter √ºbergeben wurden.
        # Dies erm√∂glicht Flexibilit√§t beim Aufruf der Methode.
        effective_buyer_club_name = buyer_club_name or CLUB_CONFIG["BUYER_CLUB_NAME"]
        effective_seller_club_name = seller_club_name or CLUB_CONFIG["SELLER_CLUB_NAME"]
        effective_file_path = file_path or SYSTEM_CONFIG["CSV_FILE_PATH"]
        
        print("=" * 70)
        print("CLUB-BASIERTE SPIELER-AUSWAHL")
        print("=" * 70)
        print(f"CSV Datei: {effective_file_path}")
        print(f"K√§ufer Club: {effective_buyer_club_name}")
        print(f"Verk√§ufer Club: {effective_seller_club_name}")
        print()
        
        try:
            # Schritt 1: Lade alle Spieler aus der CSV-Datei.
            all_players = ClubBasedPlayerDataLoader._load_all_players_from_csv(effective_file_path)
            
            # Schritt 2: Filtere Spieler basierend auf den Club-Namen.
            buyer_players = ClubBasedPlayerDataLoader._filter_players_by_club(
                all_players, effective_buyer_club_name
            )
            seller_players = ClubBasedPlayerDataLoader._filter_players_by_club(
                all_players, effective_seller_club_name
            )
            
            # Schritt 3: Zeige grundlegende Statistiken f√ºr die gefundenen Spieler.
            ClubBasedPlayerDataLoader._print_club_statistics(
                effective_buyer_club_name, buyer_players, 
                effective_seller_club_name, seller_players
            )
            
            # Schritt 4: Validiere die Kadergr√∂√üen gegen die Mindestanforderungen.
            # Diese Methode k√∂nnte eine Exception ausl√∂sen, wenn FALLBACK_TO_SAMPLE_DATA False ist.
            ClubBasedPlayerDataLoader._validate_squad_sizes(
                effective_buyer_club_name, buyer_players, 
                effective_seller_club_name, seller_players
            )
            
            # Schritt 5: Behandle Unterschiede in den Kadergr√∂√üen gem√§√ü der konfigurierten Strategie.
            buyer_players, seller_players = ClubBasedPlayerDataLoader._handle_squad_size_differences(
                effective_buyer_club_name, buyer_players, 
                effective_seller_club_name, seller_players
            )
            
            # Schritt 6: Zeige finale Informationen zu den aufbereiteten Kadern.
            ClubBasedPlayerDataLoader._print_final_squad_info(
                effective_buyer_club_name, buyer_players, 
                effective_seller_club_name, seller_players
            )
            
            return buyer_players, seller_players
            
        except FileNotFoundError:
            # Fehlerbehandlung, falls die CSV-Datei nicht gefunden wird.
            print(f"‚ùå Fehler: CSV-Datei nicht gefunden unter: {effective_file_path}")
            
            # Optionale Erstellung von Beispieldaten als Fallback.
            if CLUB_CONFIG.get("FALLBACK_TO_SAMPLE_DATA", True):
                print("üîÑ Erstelle Beispieldaten f√ºr beide Clubs als Fallback...")
                return ClubBasedPlayerDataLoader._create_sample_clubs(
                    effective_buyer_club_name, effective_seller_club_name
                )
            else:
                # Wenn kein Fallback erw√ºnscht ist, wird die Exception weitergereicht.
                raise
    
    @staticmethod
    def _load_all_players_from_csv(file_path: str) -> List[Player]:
        """
        L√§dt alle Spieler aus der CSV-Datei
        
        Args:
            file_path (str): Der Pfad zur CSV-Datei, die die Spielerdaten enth√§lt.
            
        Returns:
            List[Player]: Eine Liste von `Player`-Objekten, die aus der CSV-Datei erstellt wurden.
                          Gibt eine leere Liste zur√ºck, wenn die Datei nicht gelesen werden kann oder leer ist.
        
        Hinweis:
            Verwendet die in `SYSTEM_CONFIG` definierte Zeichenkodierung und das Trennzeichen ';'.
            Fehlerhafte Zeilen werden √ºbersprungen und eine Warnung wird ausgegeben.
        """
        players = [] # Initialisiere eine leere Liste f√ºr die Spielerobjekte.
        # Hole die konfigurierte Zeichenkodierung; Standard ist "utf-8".
        encoding = SYSTEM_CONFIG.get("CSV_ENCODING", "utf-8")
        
        print(f"üîÑ Lade alle Spieler aus CSV-Datei: {file_path} (Encoding: {encoding})...")
        
        try:
            with open(file_path, "r", encoding=encoding) as file:
                # Verwende csv.DictReader f√ºr einfachen Zugriff auf Spalten per Namen.
                # Das Trennzeichen ist ';' wie in der Datei verwendet.
                reader = csv.DictReader(file, delimiter=';')
                
                for row_num, row_data_dict in enumerate(reader, 1):
                    try:
                        # Bereinige die eingelesenen Rohdaten der Zeile.
                        cleaned_row = ClubBasedPlayerDataLoader._clean_row(row_data_dict)
                        
                        # Erstelle ein Player-Objekt aus den bereinigten Daten.
                        # Die 'player'-Spalte wird f√ºr den Namen des Spielers verwendet.
                        player_name = cleaned_row.get("player", f"Unbekannter Spieler Zeile {row_num}")
                        player = Player(player_name, cleaned_row)
                        players.append(player)
                        
                    except KeyError as ke:
                        # Spezifische Fehlermeldung f√ºr fehlende, aber erwartete Schl√ºssel.
                        print(f"‚ö†Ô∏è Warnung: Fehlender Schl√ºssel '{ke}' in Zeile {row_num}. √úberspringe Zeile.")
                        continue
                    except Exception as e:
                        # Allgemeine Fehlermeldung f√ºr andere Probleme beim Verarbeiten einer Zeile.
                        print(f"‚ö†Ô∏è Warnung: Fehler beim Verarbeiten von Zeile {row_num}: {e}. √úberspringe Zeile.")
                        continue
            
            print(f"‚úÖ {len(players)} Spieler erfolgreich aus CSV geladen.")
        except Exception as e:
            # Fehlerbehandlung f√ºr Probleme beim √ñffnen oder Lesen der Datei.
            print(f"‚ùå Kritischer Fehler beim Laden aller Spieler aus CSV: {e}")
            # In diesem Fall wird eine leere Spielerliste zur√ºckgegeben.
            
        return players
    
    @staticmethod
    def _filter_players_by_club(players: List[Player], club_name: str) -> List[Player]:
        """
        Filtert Spieler nach Club-Namen
        
        Args:
            players: Liste aller Spieler
            club_name: Name des Clubs zum Filtern
            
        Returns:
            List[Player]: Spieler die zu diesem Club geh√∂ren
        """
        # Standard exact match
        exact_matches = [p for p in players if p.club == club_name]
        if exact_matches:
            return exact_matches

        # Specific fallback for "FC Bayern M√ºnchen" due to known encoding issues in CSV
        # \xfc is the latin-1 encoding for √º
        if club_name == "FC Bayern M√ºnchen":
            # Try common variations seen in data that might result from latin1 decode
            potential_matches = ["FC Bayern M\xfcnchen", "FC Bayern M√∞nchen"] 
            for potential_match in potential_matches:
                fallback_matches = [p for p in players if p.club == potential_match]
                if fallback_matches:
                    print(f"‚ÑπÔ∏è Info: Club '{club_name}' nicht exakt gefunden, aber √úbereinstimmung mit '{potential_match}' durch Fallback.")
                    return fallback_matches
        
        # Generic fallback: case-insensitive and partial match
        print(f"‚ö†Ô∏è Warnung: Keine exakte √úbereinstimmung f√ºr '{club_name}'. Suche nach √§hnlichen Club-Namen...")
        
        # Simplified similar match: case-insensitive exact or substring
        # This is less complex than full normalization if the above specific fallbacks handle the main problem.
        club_name_lower = club_name.lower()
        similar_matches = [
            p for p in players 
            if club_name_lower == p.club.lower() # case-insensitive exact
        ]
        if similar_matches:
             print(f"   Gefunden durch case-insensitive exakte √úbereinstimmung: '{similar_matches[0].club}'")
             return similar_matches

        similar_matches_partial = [
            p for p in players
            if club_name_lower in p.club.lower() or p.club.lower() in club_name_lower
        ]

        if similar_matches_partial:
            # Prefer matches where the found club name is shorter or equal, or starts with the query
            # This tries to avoid overly broad matches like "FC" matching "FC Porto", "FC Barcelona", etc.
            # when just "FC" was (mistakenly) searched.
            # A simple heuristic: pick the one with the smallest length difference, or where query is substring
            
            best_match_club_name = None
            min_len_diff = float('inf')

            grouped_by_found_club = {}
            for p in similar_matches_partial:
                if p.club not in grouped_by_found_club:
                    grouped_by_found_club[p.club] = []
                grouped_by_found_club[p.club].append(p)

            if grouped_by_found_club:
                # Select the most common partially matched club name
                # Or the first one if counts are equal
                # This is a simple heuristic
                sorted_found_clubs = sorted(grouped_by_found_club.keys(), key=lambda c: len(grouped_by_found_club[c]), reverse=True)
                best_match_club_name = sorted_found_clubs[0]

                print(f"   Gefundene √§hnliche Clubs (Teil√ºbereinstimmung): {list(grouped_by_found_club.keys())}")
                print(f"   Verwende Spieler vom √§hnlichsten Club: '{best_match_club_name}' basierend auf Teil√ºbereinstimmung mit '{club_name}'.")
                return grouped_by_found_club[best_match_club_name]
        
        # Last resort: show available clubs if no good match found
        available_clubs = sorted(list(set(p.club for p in players)))
        print(f"‚ùå Club '{club_name}' auch nach √§hnlicher Suche nicht eindeutig gefunden.")
        print(f"   Verf√ºgbare Clubs (erste 20): {available_clubs[:20]}...")
        
        return []
    
    @staticmethod
    def _print_club_statistics(
        buyer_name: str, buyer_players: List[Player],
        seller_name: str, seller_players: List[Player]
    ):
        """
        Zeigt Statistiken √ºber die geladenen Club-Squads
        """
        if not DISPLAY_CONFIG.get("SHOW_PLAYER_STATISTICS", True):
            return
        
        print("\nüìä CLUB-SQUAD STATISTIKEN:")
        print("-" * 50)
        
        # Basis-Statistiken
        print(f"{buyer_name}:")
        print(f"  Anzahl Spieler: {len(buyer_players)}")
        if buyer_players:
            ages = [p.age for p in buyer_players]
            print(f"  Durchschnittsalter: {sum(ages)/len(ages):.1f} Jahre")
            print(f"  Altersbereich: {min(ages)}-{max(ages)} Jahre")
        
        print(f"\n{seller_name}:")
        print(f"  Anzahl Spieler: {len(seller_players)}")
        if seller_players:
            ages = [p.age for p in seller_players]
            print(f"  Durchschnittsalter: {sum(ages)/len(ages):.1f} Jahre")
            print(f"  Altersbereich: {min(ages)}-{max(ages)} Jahre")
        
        # Beispiel-Spieler
        num_examples = DISPLAY_CONFIG.get("NUM_EXAMPLE_PLAYERS_PER_CLUB", 5)
        
        if buyer_players and num_examples > 0:
            print(f"\nBeispiel-Spieler {buyer_name}:")
            for i, player in enumerate(buyer_players[:num_examples]):
                print(f"  {i+1}. {player.name} ({player.age} Jahre)")
        
        if seller_players and num_examples > 0:
            print(f"\nBeispiel-Spieler {seller_name}:")
            for i, player in enumerate(seller_players[:num_examples]):
                print(f"  {i+1}. {player.name} ({player.age} Jahre)")
    
    @staticmethod
    def _validate_squad_sizes(
        buyer_name: str, buyer_players: List[Player],
        seller_name: str, seller_players: List[Player]
    ):
        """
        Validiert ob die Squads die Mindestanforderungen erf√ºllen
        
        Raises:
            ValueError: Wenn ein Squad zu klein ist
        """
        min_players = CLUB_CONFIG["MIN_PLAYERS_REQUIRED"]
        
        issues = []
        
        if len(buyer_players) < min_players:
            issues.append(f"{buyer_name} hat nur {len(buyer_players)} Spieler (Minimum: {min_players})")
        
        if len(seller_players) < min_players:
            issues.append(f"{seller_name} hat nur {len(seller_players)} Spieler (Minimum: {min_players})")
        
        if issues and DISPLAY_CONFIG.get("WARN_SQUAD_SIZE_ISSUES", True):
            print("\n‚ö†Ô∏è SQUAD-GR√ñSSEN PROBLEME:")
            for issue in issues:
                print(f"   {issue}")
            
            if not CLUB_CONFIG.get("FALLBACK_TO_SAMPLE_DATA", True):
                raise ValueError(f"Squad-Gr√∂√üen-Validierung fehlgeschlagen: {issues}")
    
    @staticmethod  
    def _handle_squad_size_differences(
        buyer_name: str, buyer_players: List[Player],
        seller_name: str, seller_players: List[Player]
    ) -> Tuple[List[Player], List[Player]]:
        """
        Behandelt unterschiedliche Squad-Gr√∂√üen basierend auf der Konfiguration
        
        Es gibt vier Strategien:
        1. "pad_smaller": F√ºllt den kleineren Squad mit Dummy-Spielern auf
        2. "truncate_larger": K√ºrzt den gr√∂√üeren Squad auf die kleinere Gr√∂√üe
        3. "use_minimum": Nimmt nur die ersten N Spieler beider Squads
        4. "allow_unequal": Erlaubt unterschiedliche Squad-Gr√∂√üen
        
        Returns:
            Tuple[List[Player], List[Player]]: Behandelte Squads
        """
        strategy = CLUB_CONFIG["SQUAD_SIZE_STRATEGY"]
        max_players = CLUB_CONFIG["MAX_PLAYERS_PER_CLUB"]
        
        # Limitiere zuerst auf Maximum
        if len(buyer_players) > max_players:
            print(f"‚úÇÔ∏è K√ºrze {buyer_name} auf {max_players} Spieler")
            buyer_players = buyer_players[:max_players]
        
        if len(seller_players) > max_players:
            print(f"‚úÇÔ∏è K√ºrze {seller_name} auf {max_players} Spieler")
            seller_players = seller_players[:max_players]
        
        # Wenn Squads bereits gleich gro√ü sind, nichts tun
        if len(buyer_players) == len(seller_players):
            print(f"‚úÖ Squad-Gr√∂√üen sind bereits identisch: {len(buyer_players)} Spieler")
            return buyer_players, seller_players
        
        print(f"\nüîß SQUAD-GR√ñ√üEN ANPASSUNG:")
        print(f"Strategie: {strategy}")
        print(f"Vor Anpassung: {buyer_name}={len(buyer_players)}, {seller_name}={len(seller_players)}")
        
        if strategy == "pad_smaller":
            # F√ºlle kleineren Squad mit Dummy-Spielern auf
            buyer_players, seller_players = ClubBasedPlayerDataLoader._pad_smaller_squad(
                buyer_name, buyer_players, seller_name, seller_players
            )
            
        elif strategy == "truncate_larger":
            # K√ºrze gr√∂√üeren Squad auf kleinere Gr√∂√üe
            min_size = min(len(buyer_players), len(seller_players))
            print(f"K√ºrze beide Squads auf {min_size} Spieler")
            buyer_players = buyer_players[:min_size]
            seller_players = seller_players[:min_size]
            
        elif strategy == "use_minimum":
            # Nimm nur die ersten N Spieler beider Squads
            min_size = min(len(buyer_players), len(seller_players))
            print(f"Verwende die ersten {min_size} Spieler beider Squads")
            buyer_players = buyer_players[:min_size]
            seller_players = seller_players[:min_size]
            
        elif strategy == "allow_unequal":
            # Erlaube unterschiedliche Squad-Gr√∂√üen
            print("Behalte unterschiedliche Squad-Gr√∂√üen bei")
            print("‚ö†Ô∏è Warnung: Dies kann zu Problemen in der Verhandlung f√ºhren!")
            
        else:
            raise ValueError(f"Unbekannte Squad-Size-Strategie: {strategy}")
        
        print(f"Nach Anpassung: {buyer_name}={len(buyer_players)}, {seller_name}={len(seller_players)}")
        
        return buyer_players, seller_players
    
    @staticmethod
    def _pad_smaller_squad(
        buyer_name: str, buyer_players: List[Player],
        seller_name: str, seller_players: List[Player]
    ) -> Tuple[List[Player], List[Player]]:
        """
        F√ºllt den kleineren Squad mit Dummy-Spielern auf
        
        Diese Dummy-Spieler haben minimale Attribute und dienen nur zum
        Auff√ºllen, damit beide Teams gleich viele "Positionen" haben.
        """
        if len(buyer_players) < len(seller_players):
            # Buyer-Squad ist kleiner
            deficit = len(seller_players) - len(buyer_players)
            print(f"F√ºlle {buyer_name} mit {deficit} Dummy-Spielern auf")
            
            for i in range(deficit):
                dummy_player = ClubBasedPlayerDataLoader._create_dummy_player(
                    f"{CLUB_CONFIG['DUMMY_PLAYER_NAME']} {i+1}", buyer_name
                )
                buyer_players.append(dummy_player)
                
        else:
            # Seller-Squad ist kleiner
            deficit = len(buyer_players) - len(seller_players)
            print(f"F√ºlle {seller_name} mit {deficit} Dummy-Spielern auf")
            
            for i in range(deficit):
                dummy_player = ClubBasedPlayerDataLoader._create_dummy_player(
                    f"{CLUB_CONFIG['DUMMY_PLAYER_NAME']} {i+1}", seller_name
                )
                seller_players.append(dummy_player)
        
        return buyer_players, seller_players
    
    @staticmethod
    def _create_dummy_player(name: str, club: str) -> Player:
        """
        Erstellt einen Dummy-Spieler mit minimalen Attributen
        
        Args:
            name: Name des Dummy-Spielers
            club: Club des Dummy-Spielers
            
        Returns:
            Player: Dummy-Player mit niedrigen Attributen
        """
        # Minimale Attribute f√ºr Dummy-Spieler
        dummy_data = {
            "country": "Unknown",
            "age": 25,  # Durchschnittsalter
            "club": club,
            "value": "$1.000",  # Minimaler Wert
            # Alle Fu√üball-Attribute auf niedrigem Level
            "ball_control": 30,
            "dribbling": 30,
            "slide_tackle": 30,
            "stand_tackle": 30,
            "aggression": 30,
            "reactions": 30,
            "att_position": 30,
            "interceptions": 30,
            "vision": 30,
            "composure": 30,
            "crossing": 30,
            "short_pass": 30,
            "long_pass": 30,
            "acceleration": 30,
            "stamina": 30,
            "strength": 30,
            "balance": 30,
            "sprint_speed": 30,
            "agility": 30,
            "jumping": 30,
            "heading": 30,
            "shot_power": 30,
            "finishing": 30,
            "long_shots": 30,
        }
        
        return Player(name, dummy_data)
    
    @staticmethod
    def _print_final_squad_info(
        buyer_name: str, buyer_players: List[Player],
        seller_name: str, seller_players: List[Player]
    ):
        """
        Zeigt finale Informationen √ºber die Club-Squads
        """
        if not DISPLAY_CONFIG.get("SHOW_INITIAL_SQUADS", True):
            return
        
        print(f"\n‚úÖ FINALE SQUAD-ZUSAMMENSETZUNG:")
        print("-" * 50)
        print(f"{buyer_name}: {len(buyer_players)} Spieler")
        print(f"{seller_name}: {len(seller_players)} Spieler")
        
        # Pr√ºfe auf Dummy-Spieler
        buyer_dummies = sum(1 for p in buyer_players if "Reserve Player" in p.name)
        seller_dummies = sum(1 for p in seller_players if "Reserve Player" in p.name)
        
        if buyer_dummies > 0:
            print(f"  {buyer_name}: {buyer_dummies} Dummy-Spieler")
        if seller_dummies > 0:
            print(f"  {seller_name}: {seller_dummies} Dummy-Spieler")
        
        print("-" * 50)
    
    @staticmethod
    def _clean_row(row: Dict[str, str]) -> Dict[str, str]:
        cleaned = {}
        default_unknown_keys = ["player", "country", "club"]

        for key, value in row.items():
            clean_key = key.strip() if isinstance(key, str) else (str(key) if key is not None else "UnknownKey")

            if isinstance(value, str):
                clean_value = value.strip()
            elif value is None:
                clean_value = "" 
            else:
                try:
                    clean_value = str(value).strip()
                except:
                    clean_value = "" 

            if not clean_value or clean_value.lower() == "nan":
                if clean_key in default_unknown_keys:
                    clean_value = "Unknown"
                else:
                    clean_value = "0" 
            
            cleaned[clean_key] = clean_value
        
        return cleaned
    
    @staticmethod
    def _create_sample_clubs(
        buyer_club_name: str, 
        seller_club_name: str
    ) -> Tuple[List[Player], List[Player]]:
        """
        Erstellt Beispiel-Squads f√ºr beide Clubs falls CSV nicht verf√ºgbar
        
        Args:
            buyer_club_name: Name des K√§ufer-Clubs
            seller_club_name: Name des Verk√§ufer-Clubs
            
        Returns:
            Tuple[List[Player], List[Player]]: Beispiel-Squads
        """
        print(f"\nüîÑ ERSTELLE BEISPIEL-SQUADS:")
        print(f"K√§ufer: {buyer_club_name}")
        print(f"Verk√§ufer: {seller_club_name}")
        
        squad_size = CLUB_CONFIG.get("MIN_PLAYERS_REQUIRED", 11)
        
        buyer_players = ClubBasedPlayerDataLoader._create_sample_squad(
            buyer_club_name, squad_size
        )
        seller_players = ClubBasedPlayerDataLoader._create_sample_squad(
            seller_club_name, squad_size
        )
        
        print(f"‚úÖ Erstellt: {len(buyer_players)} Spieler pro Club")
        
        return buyer_players, seller_players
    
    @staticmethod
    def _create_sample_squad(club_name: str, squad_size: int) -> List[Player]:
        """
        Erstellt einen Beispiel-Squad f√ºr einen Club
        
        Args:
            club_name: Name des Clubs
            squad_size: Anzahl Spieler im Squad
            
        Returns:
            List[Player]: Beispiel-Squad
        """
        import random
        
        # Sample Namen f√ºr verschiedene Nationalit√§ten
        sample_names = [
            ("Jo√£o Silva", "Brazil"),
            ("Marco Rossi", "Italy"), 
            ("Hans Mueller", "Germany"),
            ("Pierre Dupont", "France"),
            ("David Smith", "England"),
            ("Carlos Rodriguez", "Spain"),
            ("Ahmed Hassan", "Egypt"),
            ("Hiroshi Tanaka", "Japan"),
            ("Lars Andersen", "Denmark"),
            ("Piotr Kowalski", "Poland"),
        ]
        
        players = []
        
        for i in range(squad_size):
            # W√§hle zuf√§lligen Namen und Nation
            name_template, country = random.choice(sample_names)
            name = f"{name_template} {i+1}"
            
            # Erstelle realistische Attribute
            data = {
                "country": country,
                "age": random.randint(18, 35),
                "club": club_name,
                "value": f"${random.randint(100, 5000)}.000",
                # Realistische Attribut-Verteilungen
                "ball_control": random.randint(40, 90),
                "dribbling": random.randint(30, 85),
                "slide_tackle": random.randint(25, 80),
                "stand_tackle": random.randint(30, 85),
                "aggression": random.randint(35, 90),
                "reactions": random.randint(45, 90),
                "att_position": random.randint(25, 85),
                "interceptions": random.randint(30, 85),
                "vision": random.randint(35, 90),
                "composure": random.randint(40, 85),
                "crossing": random.randint(25, 80),
                "short_pass": random.randint(45, 90),
                "long_pass": random.randint(30, 85),
                "acceleration": random.randint(40, 90),
                "stamina": random.randint(55, 95),
                "strength": random.randint(45, 90),
                "balance": random.randint(50, 85),
                "sprint_speed": random.randint(40, 90),
                "agility": random.randint(45, 85),
                "jumping": random.randint(35, 80),
                "heading": random.randint(30, 80),
                "shot_power": random.randint(25, 85),
                "finishing": random.randint(20, 85),
                "long_shots": random.randint(25, 80),
            }
            
            player = Player(name, data)
            players.append(player)
        
        return players

    # R√ºckw√§rts-Kompatibilit√§t f√ºr das alte System
    @staticmethod
    def load_from_csv(file_path: str = None, max_players: int = None) -> List[Player]:
        """
        DEPRECATED: Alte Methode f√ºr R√ºckw√§rts-Kompatibilit√§t
        Verwende stattdessen load_clubs_from_csv()
        """
        print("‚ö†Ô∏è Warnung: load_from_csv() ist deprecated!")
        print("   Verwende load_clubs_from_csv() f√ºr Club-basierte Auswahl")
        
        # Lade einfach die ersten max_players aus der CSV
        if file_path is None:
            file_path = SYSTEM_CONFIG["CSV_FILE_PATH"]
        if max_players is None:
            max_players = 30
        
        all_players = ClubBasedPlayerDataLoader._load_all_players_from_csv(file_path)
        return all_players[:max_players]